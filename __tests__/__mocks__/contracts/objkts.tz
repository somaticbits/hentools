parameter (or (or (or (pair %balance_of (list %requests (pair (address %owner) (nat %token_id))) (contract %callback (list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))))) (list %hDAO_batch (pair (nat %amount) (address %to_)))) (or (pair %mint (pair (address %address) (nat %amount)) (pair (nat %token_id) (map %token_info string bytes))) (address %set_administrator))) (or (or (bool %set_pause) (pair %token_metadata (list %token_ids nat) (lambda %handler (list (pair (nat %token_id) (map %token_info string bytes))) unit))) (or (list %transfer (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))) (list %update_operators (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id))))))));
storage   (pair (pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))));
code
  {
    UNPAIR;     # @parameter : @storage
    IF_LEFT
      {
        IF_LEFT
          {
            IF_LEFT
              {
                SWAP;       # @storage : @parameter%balance_of
                # == balance_of ==
                # sp.verify(~ self.data.paused) # @storage : @parameter%balance_of
                DUP;        # @storage : @storage : @parameter%balance_of
                DUG 2;      # @storage : @parameter%balance_of : @storage
                GET 5;      # bool : @parameter%balance_of : @storage
                IF
                  {
                    PUSH string "WrongCondition: ~ self.data.paused"; # string : @parameter%balance_of : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @parameter%balance_of : @storage
                # def f_x0(_x0):
                #   sp.verify(self.data.token_metadata.contains(_x0.token_id), 'FA2_TOKEN_UNDEFINED')
                #   sp.if self.data.ledger.contains((sp.set_type_expr(_x0.owner, sp.TAddress), sp.set_type_expr(_x0.token_id, sp.TNat))):
                #     sp.result(sp.record(request = sp.record(owner = sp.set_type_expr(_x0.owner, sp.TAddress), token_id = sp.set_type_expr(_x0.token_id, sp.TNat)), balance = self.data.ledger[(sp.set_type_expr(_x0.owner, sp.TAddress), sp.set_type_expr(_x0.token_id, sp.TNat))].balance))
                #   sp.else:
                #     sp.result(sp.record(request = sp.record(owner = sp.set_type_expr(_x0.owner, sp.TAddress), token_id = sp.set_type_expr(_x0.token_id, sp.TNat)), balance = 0))
                # responses = sp.local("responses", params.requests.map(sp.build_lambda(f_x0))) # @parameter%balance_of : @storage
                DUP;        # @parameter%balance_of : @parameter%balance_of : @storage
                CAR;        # list (pair (address %owner) (nat %token_id)) : @parameter%balance_of : @storage
                MAP
                  {
                    # sp.verify(self.data.token_metadata.contains(_x0.token_id), 'FA2_TOKEN_UNDEFINED') # pair (address %owner) (nat %token_id) : @parameter%balance_of : @storage
                    DUP 3;      # @storage : pair (address %owner) (nat %token_id) : @parameter%balance_of : @storage
                    GET 6;      # big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %owner) (nat %token_id) : @parameter%balance_of : @storage
                    SWAP;       # pair (address %owner) (nat %token_id) : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : @parameter%balance_of : @storage
                    DUP;        # pair (address %owner) (nat %token_id) : pair (address %owner) (nat %token_id) : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : @parameter%balance_of : @storage
                    DUG 2;      # pair (address %owner) (nat %token_id) : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %owner) (nat %token_id) : @parameter%balance_of : @storage
                    CDR;        # nat : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %owner) (nat %token_id) : @parameter%balance_of : @storage
                    MEM;        # bool : pair (address %owner) (nat %token_id) : @parameter%balance_of : @storage
                    IF
                      {}
                      {
                        PUSH string "FA2_TOKEN_UNDEFINED"; # string : pair (address %owner) (nat %token_id) : @parameter%balance_of : @storage
                        FAILWITH;   # FAILED
                      }; # pair (address %owner) (nat %token_id) : @parameter%balance_of : @storage
                    # if self.data.ledger.contains((sp.set_type_expr(_x0.owner, sp.TAddress), sp.set_type_expr(_x0.token_id, sp.TNat))): # pair (address %owner) (nat %token_id) : @parameter%balance_of : @storage
                    DUP 3;      # @storage : pair (address %owner) (nat %token_id) : @parameter%balance_of : @storage
                    CAR;        # pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat)) : pair (address %owner) (nat %token_id) : @parameter%balance_of : @storage
                    GET 4;      # big_map (pair address nat) nat : pair (address %owner) (nat %token_id) : @parameter%balance_of : @storage
                    SWAP;       # pair (address %owner) (nat %token_id) : big_map (pair address nat) nat : @parameter%balance_of : @storage
                    DUP;        # pair (address %owner) (nat %token_id) : pair (address %owner) (nat %token_id) : big_map (pair address nat) nat : @parameter%balance_of : @storage
                    CDR;        # nat : pair (address %owner) (nat %token_id) : big_map (pair address nat) nat : @parameter%balance_of : @storage
                    SWAP;       # pair (address %owner) (nat %token_id) : nat : big_map (pair address nat) nat : @parameter%balance_of : @storage
                    DUP;        # pair (address %owner) (nat %token_id) : pair (address %owner) (nat %token_id) : nat : big_map (pair address nat) nat : @parameter%balance_of : @storage
                    DUG 3;      # pair (address %owner) (nat %token_id) : nat : big_map (pair address nat) nat : pair (address %owner) (nat %token_id) : @parameter%balance_of : @storage
                    CAR;        # address : nat : big_map (pair address nat) nat : pair (address %owner) (nat %token_id) : @parameter%balance_of : @storage
                    PAIR;       # pair address nat : big_map (pair address nat) nat : pair (address %owner) (nat %token_id) : @parameter%balance_of : @storage
                    MEM;        # bool : pair (address %owner) (nat %token_id) : @parameter%balance_of : @storage
                    IF
                      {
                        # sp.result(sp.record(request = sp.record(owner = sp.set_type_expr(_x0.owner, sp.TAddress), token_id = sp.set_type_expr(_x0.token_id, sp.TNat)), balance = self.data.ledger[(sp.set_type_expr(_x0.owner, sp.TAddress), sp.set_type_expr(_x0.token_id, sp.TNat))].balance)) # pair (address %owner) (nat %token_id) : @parameter%balance_of : @storage
                        DUP 3;      # @storage : pair (address %owner) (nat %token_id) : @parameter%balance_of : @storage
                        CAR;        # pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat)) : pair (address %owner) (nat %token_id) : @parameter%balance_of : @storage
                        GET 4;      # big_map (pair address nat) nat : pair (address %owner) (nat %token_id) : @parameter%balance_of : @storage
                        SWAP;       # pair (address %owner) (nat %token_id) : big_map (pair address nat) nat : @parameter%balance_of : @storage
                        DUP;        # pair (address %owner) (nat %token_id) : pair (address %owner) (nat %token_id) : big_map (pair address nat) nat : @parameter%balance_of : @storage
                        CDR;        # nat : pair (address %owner) (nat %token_id) : big_map (pair address nat) nat : @parameter%balance_of : @storage
                        SWAP;       # pair (address %owner) (nat %token_id) : nat : big_map (pair address nat) nat : @parameter%balance_of : @storage
                        DUP;        # pair (address %owner) (nat %token_id) : pair (address %owner) (nat %token_id) : nat : big_map (pair address nat) nat : @parameter%balance_of : @storage
                        DUG 3;      # pair (address %owner) (nat %token_id) : nat : big_map (pair address nat) nat : pair (address %owner) (nat %token_id) : @parameter%balance_of : @storage
                        CAR;        # address : nat : big_map (pair address nat) nat : pair (address %owner) (nat %token_id) : @parameter%balance_of : @storage
                        PAIR;       # pair address nat : big_map (pair address nat) nat : pair (address %owner) (nat %token_id) : @parameter%balance_of : @storage
                        GET;        # option nat : pair (address %owner) (nat %token_id) : @parameter%balance_of : @storage
                        IF_NONE
                          {
                            PUSH int 1056; # int : pair (address %owner) (nat %token_id) : @parameter%balance_of : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : pair (address %owner) (nat %token_id) : @parameter%balance_of : @storage
                        SWAP;       # pair (address %owner) (nat %token_id) : @some : @parameter%balance_of : @storage
                        PAIR;       # pair (pair (address %owner) (nat %token_id)) @some : @parameter%balance_of : @storage
                      }
                      {
                        # sp.result(sp.record(request = sp.record(owner = sp.set_type_expr(_x0.owner, sp.TAddress), token_id = sp.set_type_expr(_x0.token_id, sp.TNat)), balance = 0)) # pair (address %owner) (nat %token_id) : @parameter%balance_of : @storage
                        PUSH nat 0; # nat : pair (address %owner) (nat %token_id) : @parameter%balance_of : @storage
                        SWAP;       # pair (address %owner) (nat %token_id) : nat : @parameter%balance_of : @storage
                        PAIR;       # pair (pair (address %owner) (nat %token_id)) nat : @parameter%balance_of : @storage
                      }; # pair (pair (address %owner) (nat %token_id)) nat : @parameter%balance_of : @storage
                  }; # list (pair (pair (address %owner) (nat %token_id)) nat) : @parameter%balance_of : @storage
                # sp.transfer(responses.value, sp.tez(0), sp.set_type_expr(params.callback, sp.TContract(sp.TList(sp.TRecord(balance = sp.TNat, request = sp.TRecord(owner = sp.TAddress, token_id = sp.TNat).layout(("owner", "token_id"))).layout(("request", "balance")))))) # list (pair (pair (address %owner) (nat %token_id)) nat) : @parameter%balance_of : @storage
                NIL operation; # list operation : list (pair (pair (address %owner) (nat %token_id)) nat) : @parameter%balance_of : @storage
                DIG 2;      # @parameter%balance_of : list operation : list (pair (pair (address %owner) (nat %token_id)) nat) : @storage
                CDR;        # contract (list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))) : list operation : list (pair (pair (address %owner) (nat %token_id)) nat) : @storage
                PUSH mutez 0; # mutez : contract (list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))) : list operation : list (pair (pair (address %owner) (nat %token_id)) nat) : @storage
                DIG 3;      # list (pair (pair (address %owner) (nat %token_id)) nat) : mutez : contract (list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))) : list operation : @storage
                TRANSFER_TOKENS; # operation : list operation : @storage
                CONS;       # list operation : @storage
              }
              {
                SWAP;       # @storage : @parameter%hDAO_batch
                # == hDAO_batch ==
                # sp.verify(sp.sender == self.data.administrator) # @storage : @parameter%hDAO_batch
                DUP;        # @storage : @storage : @parameter%hDAO_batch
                DUG 2;      # @storage : @parameter%hDAO_batch : @storage
                CAR;        # pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat)) : @parameter%hDAO_batch : @storage
                CAR;        # address : @parameter%hDAO_batch : @storage
                SENDER;     # @sender : address : @parameter%hDAO_batch : @storage
                COMPARE;    # int : @parameter%hDAO_batch : @storage
                EQ;         # bool : @parameter%hDAO_batch : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: sp.sender == self.data.administrator"; # string : @parameter%hDAO_batch : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%hDAO_batch : @storage
                # for e in params: ... # @parameter%hDAO_batch : @storage
                DUP;        # @parameter%hDAO_batch : @parameter%hDAO_batch : @storage
                ITER
                  {
                    # if self.data.ledger.contains((sp.set_type_expr(e.to_, sp.TAddress), sp.set_type_expr(0, sp.TNat))): # pair (nat %amount) (address %to_) : @parameter%hDAO_batch : @storage
                    DUP 3;      # @storage : pair (nat %amount) (address %to_) : @parameter%hDAO_batch : @storage
                    CAR;        # pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat)) : pair (nat %amount) (address %to_) : @parameter%hDAO_batch : @storage
                    GET 4;      # big_map (pair address nat) nat : pair (nat %amount) (address %to_) : @parameter%hDAO_batch : @storage
                    PUSH nat 0; # nat : big_map (pair address nat) nat : pair (nat %amount) (address %to_) : @parameter%hDAO_batch : @storage
                    DUP 3;      # pair (nat %amount) (address %to_) : nat : big_map (pair address nat) nat : pair (nat %amount) (address %to_) : @parameter%hDAO_batch : @storage
                    CDR;        # address : nat : big_map (pair address nat) nat : pair (nat %amount) (address %to_) : @parameter%hDAO_batch : @storage
                    PAIR;       # pair address nat : big_map (pair address nat) nat : pair (nat %amount) (address %to_) : @parameter%hDAO_batch : @storage
                    MEM;        # bool : pair (nat %amount) (address %to_) : @parameter%hDAO_batch : @storage
                    IF
                      {
                        # self.data.ledger[(sp.set_type_expr(e.to_, sp.TAddress), sp.set_type_expr(0, sp.TNat))].balance += e.amount # pair (nat %amount) (address %to_) : @parameter%hDAO_batch : @storage
                        DIG 2;      # @storage : pair (nat %amount) (address %to_) : @parameter%hDAO_batch
                        UNPAIR;     # pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat)) : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (nat %amount) (address %to_) : @parameter%hDAO_batch
                        UNPAIR;     # address : pair (nat %all_tokens) (big_map %ledger (pair address nat) nat) : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (nat %amount) (address %to_) : @parameter%hDAO_batch
                        SWAP;       # pair (nat %all_tokens) (big_map %ledger (pair address nat) nat) : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (nat %amount) (address %to_) : @parameter%hDAO_batch
                        UNPAIR;     # nat : big_map (pair address nat) nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (nat %amount) (address %to_) : @parameter%hDAO_batch
                        SWAP;       # big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (nat %amount) (address %to_) : @parameter%hDAO_batch
                        DUP;        # big_map (pair address nat) nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (nat %amount) (address %to_) : @parameter%hDAO_batch
                        PUSH nat 0; # nat : big_map (pair address nat) nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (nat %amount) (address %to_) : @parameter%hDAO_batch
                        DUP 7;      # pair (nat %amount) (address %to_) : nat : big_map (pair address nat) nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (nat %amount) (address %to_) : @parameter%hDAO_batch
                        CDR;        # address : nat : big_map (pair address nat) nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (nat %amount) (address %to_) : @parameter%hDAO_batch
                        PAIR;       # pair address nat : big_map (pair address nat) nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (nat %amount) (address %to_) : @parameter%hDAO_batch
                        DUP;        # pair address nat : pair address nat : big_map (pair address nat) nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (nat %amount) (address %to_) : @parameter%hDAO_batch
                        DUG 2;      # pair address nat : big_map (pair address nat) nat : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (nat %amount) (address %to_) : @parameter%hDAO_batch
                        GET;        # option nat : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (nat %amount) (address %to_) : @parameter%hDAO_batch
                        IF_NONE
                          {
                            PUSH int 1108; # int : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (nat %amount) (address %to_) : @parameter%hDAO_batch
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (nat %amount) (address %to_) : @parameter%hDAO_batch
                        DIG 6;      # pair (nat %amount) (address %to_) : @some : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%hDAO_batch
                        CAR;        # nat : @some : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%hDAO_batch
                        ADD;        # nat : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%hDAO_batch
                        SOME;       # option nat : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%hDAO_batch
                        SWAP;       # pair address nat : option nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%hDAO_batch
                        UPDATE;     # big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%hDAO_batch
                        SWAP;       # nat : big_map (pair address nat) nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%hDAO_batch
                        PAIR;       # pair nat (big_map (pair address nat) nat) : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%hDAO_batch
                        SWAP;       # address : pair nat (big_map (pair address nat) nat) : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%hDAO_batch
                        PAIR;       # pair address (pair nat (big_map (pair address nat) nat)) : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%hDAO_batch
                        PAIR;       # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))) : @parameter%hDAO_batch
                        SWAP;       # @parameter%hDAO_batch : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
                      }
                      {
                        # self.data.ledger[(sp.set_type_expr(e.to_, sp.TAddress), sp.set_type_expr(0, sp.TNat))] = sp.record(balance = e.amount) # pair (nat %amount) (address %to_) : @parameter%hDAO_batch : @storage
                        DIG 2;      # @storage : pair (nat %amount) (address %to_) : @parameter%hDAO_batch
                        UNPAIR;     # pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat)) : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (nat %amount) (address %to_) : @parameter%hDAO_batch
                        UNPAIR;     # address : pair (nat %all_tokens) (big_map %ledger (pair address nat) nat) : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (nat %amount) (address %to_) : @parameter%hDAO_batch
                        SWAP;       # pair (nat %all_tokens) (big_map %ledger (pair address nat) nat) : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (nat %amount) (address %to_) : @parameter%hDAO_batch
                        UNPAIR;     # nat : big_map (pair address nat) nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (nat %amount) (address %to_) : @parameter%hDAO_batch
                        SWAP;       # big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (nat %amount) (address %to_) : @parameter%hDAO_batch
                        DUP 5;      # pair (nat %amount) (address %to_) : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (nat %amount) (address %to_) : @parameter%hDAO_batch
                        CAR;        # nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (nat %amount) (address %to_) : @parameter%hDAO_batch
                        SOME;       # option nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (nat %amount) (address %to_) : @parameter%hDAO_batch
                        PUSH nat 0; # nat : option nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (nat %amount) (address %to_) : @parameter%hDAO_batch
                        DIG 6;      # pair (nat %amount) (address %to_) : nat : option nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%hDAO_batch
                        CDR;        # address : nat : option nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%hDAO_batch
                        PAIR;       # pair address nat : option nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%hDAO_batch
                        UPDATE;     # big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%hDAO_batch
                        SWAP;       # nat : big_map (pair address nat) nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%hDAO_batch
                        PAIR;       # pair nat (big_map (pair address nat) nat) : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%hDAO_batch
                        SWAP;       # address : pair nat (big_map (pair address nat) nat) : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%hDAO_batch
                        PAIR;       # pair address (pair nat (big_map (pair address nat) nat)) : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%hDAO_batch
                        PAIR;       # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))) : @parameter%hDAO_batch
                        SWAP;       # @parameter%hDAO_batch : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
                      }; # list (pair (nat %amount) (address %to_)) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
                    SWAP;       # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))) : list (pair (nat %amount) (address %to_))
                    # if self.data.token_metadata.contains(0): # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))) : list (pair (nat %amount) (address %to_))
                    DUP;        # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))) : list (pair (nat %amount) (address %to_))
                    DUG 2;      # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))) : list (pair (nat %amount) (address %to_)) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
                    GET 6;      # big_map nat (pair (nat %token_id) (map %token_info string bytes)) : list (pair (nat %amount) (address %to_)) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
                    PUSH nat 0; # nat : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : list (pair (nat %amount) (address %to_)) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
                    MEM;        # bool : list (pair (nat %amount) (address %to_)) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
                    IF
                      {}
                      {
                        SWAP;       # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))) : list (pair (nat %amount) (address %to_))
                        # self.data.token_metadata[0] = sp.record(token_id = 0, token_info = {'' : sp.pack('ipfs://QmSVsfwH8es7Ur2eqto9hVpcd2dfWASmEaNxTPpcymuJzg')}) # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))) : list (pair (nat %amount) (address %to_))
                        DUP;        # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))) : list (pair (nat %amount) (address %to_))
                        GET 6;      # big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))) : list (pair (nat %amount) (address %to_))
                        EMPTY_MAP string bytes; # map string bytes : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))) : list (pair (nat %amount) (address %to_))
                        PUSH string "ipfs://QmSVsfwH8es7Ur2eqto9hVpcd2dfWASmEaNxTPpcymuJzg"; # string : map string bytes : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))) : list (pair (nat %amount) (address %to_))
                        PACK;       # bytes : map string bytes : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))) : list (pair (nat %amount) (address %to_))
                        SOME;       # option bytes : map string bytes : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))) : list (pair (nat %amount) (address %to_))
                        PUSH string ""; # string : option bytes : map string bytes : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))) : list (pair (nat %amount) (address %to_))
                        UPDATE;     # map string bytes : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))) : list (pair (nat %amount) (address %to_))
                        PUSH nat 0; # nat : map string bytes : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))) : list (pair (nat %amount) (address %to_))
                        PAIR;       # pair nat (map string bytes) : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))) : list (pair (nat %amount) (address %to_))
                        SOME;       # option (pair nat (map string bytes)) : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))) : list (pair (nat %amount) (address %to_))
                        PUSH nat 0; # nat : option (pair nat (map string bytes)) : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))) : list (pair (nat %amount) (address %to_))
                        UPDATE;     # big_map nat (pair nat (map string bytes)) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))) : list (pair (nat %amount) (address %to_))
                        UPDATE 6;   # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))) : list (pair (nat %amount) (address %to_))
                        SWAP;       # list (pair (nat %amount) (address %to_)) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
                      }; # list (pair (nat %amount) (address %to_)) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
                  }; # @parameter%hDAO_batch : @storage
                DROP;       # @storage
                NIL operation; # list operation : @storage
              }; # list operation : @storage
          }
          {
            IF_LEFT
              {
                SWAP;       # @storage : @parameter%mint
                # == mint ==
                # sp.verify(sp.sender == self.data.administrator) # @storage : @parameter%mint
                DUP;        # @storage : @storage : @parameter%mint
                DUG 2;      # @storage : @parameter%mint : @storage
                CAR;        # pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat)) : @parameter%mint : @storage
                CAR;        # address : @parameter%mint : @storage
                SENDER;     # @sender : address : @parameter%mint : @storage
                COMPARE;    # int : @parameter%mint : @storage
                EQ;         # bool : @parameter%mint : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: sp.sender == self.data.administrator"; # string : @parameter%mint : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%mint : @storage
                SWAP;       # @storage : @parameter%mint
                # self.data.all_tokens = sp.max(self.data.all_tokens, params.token_id + 1) # @storage : @parameter%mint
                UNPAIR;     # pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat)) : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%mint
                UNPAIR;     # address : pair (nat %all_tokens) (big_map %ledger (pair address nat) nat) : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%mint
                SWAP;       # pair (nat %all_tokens) (big_map %ledger (pair address nat) nat) : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%mint
                UNPAIR;     # nat : big_map (pair address nat) nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%mint
                PUSH nat 1; # nat : nat : big_map (pair address nat) nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%mint
                DUP 6;      # @parameter%mint : nat : nat : big_map (pair address nat) nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%mint
                GET 3;      # nat : nat : nat : big_map (pair address nat) nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%mint
                ADD;        # nat : nat : big_map (pair address nat) nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%mint
                SWAP;       # nat : nat : big_map (pair address nat) nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%mint
                DUP;        # nat : nat : nat : big_map (pair address nat) nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%mint
                DUP 3;      # nat : nat : nat : nat : big_map (pair address nat) nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%mint
                COMPARE;    # int : nat : nat : big_map (pair address nat) nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%mint
                LE;         # bool : nat : nat : big_map (pair address nat) nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%mint
                IF
                  {
                    SWAP;       # nat : nat : big_map (pair address nat) nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%mint
                    DROP;       # nat : big_map (pair address nat) nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%mint
                  }
                  {
                    DROP;       # nat : big_map (pair address nat) nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%mint
                  }; # nat : big_map (pair address nat) nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%mint
                PAIR;       # pair nat (big_map (pair address nat) nat) : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%mint
                SWAP;       # address : pair nat (big_map (pair address nat) nat) : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%mint
                PAIR;       # pair address (pair nat (big_map (pair address nat) nat)) : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%mint
                PAIR;       # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))) : @parameter%mint
                # if self.data.ledger.contains((sp.set_type_expr(params.address, sp.TAddress), sp.set_type_expr(params.token_id, sp.TNat))): # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))) : @parameter%mint
                DUP;        # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))) : @parameter%mint
                DUG 2;      # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))) : @parameter%mint : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
                CAR;        # pair address (pair nat (big_map (pair address nat) nat)) : @parameter%mint : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
                GET 4;      # big_map (pair address nat) nat : @parameter%mint : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
                SWAP;       # @parameter%mint : big_map (pair address nat) nat : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
                DUP;        # @parameter%mint : @parameter%mint : big_map (pair address nat) nat : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
                GET 3;      # nat : @parameter%mint : big_map (pair address nat) nat : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
                SWAP;       # @parameter%mint : nat : big_map (pair address nat) nat : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
                DUP;        # @parameter%mint : @parameter%mint : nat : big_map (pair address nat) nat : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
                DUG 3;      # @parameter%mint : nat : big_map (pair address nat) nat : @parameter%mint : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
                CAR;        # pair (address %address) (nat %amount) : nat : big_map (pair address nat) nat : @parameter%mint : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
                CAR;        # address : nat : big_map (pair address nat) nat : @parameter%mint : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
                PAIR;       # pair address nat : big_map (pair address nat) nat : @parameter%mint : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
                MEM;        # bool : @parameter%mint : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
                IF
                  {
                    SWAP;       # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))) : @parameter%mint
                    # self.data.ledger[(sp.set_type_expr(params.address, sp.TAddress), sp.set_type_expr(params.token_id, sp.TNat))].balance += params.amount # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))) : @parameter%mint
                    UNPAIR;     # pair address (pair nat (big_map (pair address nat) nat)) : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%mint
                    UNPAIR;     # address : pair nat (big_map (pair address nat) nat) : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%mint
                    SWAP;       # pair nat (big_map (pair address nat) nat) : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%mint
                    UNPAIR;     # nat : big_map (pair address nat) nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%mint
                    SWAP;       # big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%mint
                    DUP;        # big_map (pair address nat) nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%mint
                    DIG 5;      # @parameter%mint : big_map (pair address nat) nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))
                    DUP;        # @parameter%mint : @parameter%mint : big_map (pair address nat) nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))
                    GET 3;      # nat : @parameter%mint : big_map (pair address nat) nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))
                    SWAP;       # @parameter%mint : nat : big_map (pair address nat) nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))
                    DUP;        # @parameter%mint : @parameter%mint : nat : big_map (pair address nat) nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))
                    DUG 7;      # @parameter%mint : nat : big_map (pair address nat) nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%mint
                    CAR;        # pair (address %address) (nat %amount) : nat : big_map (pair address nat) nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%mint
                    CAR;        # address : nat : big_map (pair address nat) nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%mint
                    PAIR;       # pair address nat : big_map (pair address nat) nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%mint
                    DUP;        # pair address nat : pair address nat : big_map (pair address nat) nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%mint
                    DUG 2;      # pair address nat : big_map (pair address nat) nat : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%mint
                    GET;        # option nat : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%mint
                    IF_NONE
                      {
                        PUSH int 1159; # int : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%mint
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%mint
                    DUP 7;      # @parameter%mint : @some : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%mint
                    CAR;        # pair (address %address) (nat %amount) : @some : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%mint
                    CDR;        # nat : @some : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%mint
                    ADD;        # nat : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%mint
                    SOME;       # option nat : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%mint
                    SWAP;       # pair address nat : option nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%mint
                    UPDATE;     # big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%mint
                    SWAP;       # nat : big_map (pair address nat) nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%mint
                    PAIR;       # pair nat (big_map (pair address nat) nat) : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%mint
                    SWAP;       # address : pair nat (big_map (pair address nat) nat) : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%mint
                    PAIR;       # pair address (pair nat (big_map (pair address nat) nat)) : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%mint
                    PAIR;       # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))) : @parameter%mint
                    SWAP;       # @parameter%mint : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
                  }
                  {
                    SWAP;       # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))) : @parameter%mint
                    # self.data.ledger[(sp.set_type_expr(params.address, sp.TAddress), sp.set_type_expr(params.token_id, sp.TNat))] = sp.record(balance = params.amount) # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))) : @parameter%mint
                    UNPAIR;     # pair address (pair nat (big_map (pair address nat) nat)) : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%mint
                    UNPAIR;     # address : pair nat (big_map (pair address nat) nat) : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%mint
                    SWAP;       # pair nat (big_map (pair address nat) nat) : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%mint
                    UNPAIR;     # nat : big_map (pair address nat) nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%mint
                    SWAP;       # big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%mint
                    DUP 5;      # @parameter%mint : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%mint
                    CAR;        # pair (address %address) (nat %amount) : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%mint
                    CDR;        # nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%mint
                    SOME;       # option nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%mint
                    DIG 5;      # @parameter%mint : option nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))
                    DUP;        # @parameter%mint : @parameter%mint : option nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))
                    GET 3;      # nat : @parameter%mint : option nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))
                    SWAP;       # @parameter%mint : nat : option nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))
                    DUP;        # @parameter%mint : @parameter%mint : nat : option nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))
                    DUG 7;      # @parameter%mint : nat : option nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%mint
                    CAR;        # pair (address %address) (nat %amount) : nat : option nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%mint
                    CAR;        # address : nat : option nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%mint
                    PAIR;       # pair address nat : option nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%mint
                    UPDATE;     # big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%mint
                    SWAP;       # nat : big_map (pair address nat) nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%mint
                    PAIR;       # pair nat (big_map (pair address nat) nat) : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%mint
                    SWAP;       # address : pair nat (big_map (pair address nat) nat) : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%mint
                    PAIR;       # pair address (pair nat (big_map (pair address nat) nat)) : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%mint
                    PAIR;       # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))) : @parameter%mint
                    SWAP;       # @parameter%mint : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
                  }; # @parameter%mint : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
                SWAP;       # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))) : @parameter%mint
                # if self.data.token_metadata.contains(params.token_id): # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))) : @parameter%mint
                DUP;        # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))) : @parameter%mint
                DUG 2;      # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))) : @parameter%mint : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
                GET 6;      # big_map nat (pair (nat %token_id) (map %token_info string bytes)) : @parameter%mint : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
                SWAP;       # @parameter%mint : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
                DUP;        # @parameter%mint : @parameter%mint : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
                DUG 2;      # @parameter%mint : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : @parameter%mint : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
                GET 3;      # nat : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : @parameter%mint : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
                MEM;        # bool : @parameter%mint : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
                IF
                  {
                    DROP;       # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
                  }
                  {
                    SWAP;       # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))) : @parameter%mint
                    # self.data.token_metadata[params.token_id] = sp.record(token_id = params.token_id, token_info = params.token_info) # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))) : @parameter%mint
                    DUP;        # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))) : @parameter%mint
                    GET 6;      # big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))) : @parameter%mint
                    DIG 2;      # @parameter%mint : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
                    DUP;        # @parameter%mint : @parameter%mint : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
                    GET 4;      # map string bytes : @parameter%mint : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
                    SWAP;       # @parameter%mint : map string bytes : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
                    DUP;        # @parameter%mint : @parameter%mint : map string bytes : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
                    DUG 4;      # @parameter%mint : map string bytes : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))) : @parameter%mint
                    GET 3;      # nat : map string bytes : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))) : @parameter%mint
                    PAIR;       # pair nat (map string bytes) : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))) : @parameter%mint
                    SOME;       # option (pair nat (map string bytes)) : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))) : @parameter%mint
                    DIG 3;      # @parameter%mint : option (pair nat (map string bytes)) : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
                    GET 3;      # nat : option (pair nat (map string bytes)) : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
                    UPDATE;     # big_map nat (pair nat (map string bytes)) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
                    UPDATE 6;   # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
                  }; # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
              }
              {
                SWAP;       # @storage : @parameter%set_administrator
                # == set_administrator ==
                # sp.verify(sp.sender == self.data.administrator) # @storage : @parameter%set_administrator
                DUP;        # @storage : @storage : @parameter%set_administrator
                DUG 2;      # @storage : @parameter%set_administrator : @storage
                CAR;        # pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat)) : @parameter%set_administrator : @storage
                CAR;        # address : @parameter%set_administrator : @storage
                SENDER;     # @sender : address : @parameter%set_administrator : @storage
                COMPARE;    # int : @parameter%set_administrator : @storage
                EQ;         # bool : @parameter%set_administrator : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: sp.sender == self.data.administrator"; # string : @parameter%set_administrator : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%set_administrator : @storage
                SWAP;       # @storage : @parameter%set_administrator
                # self.data.administrator = params # @storage : @parameter%set_administrator
                UNPAIR;     # pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat)) : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%set_administrator
                CDR;        # pair (nat %all_tokens) (big_map %ledger (pair address nat) nat) : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : @parameter%set_administrator
                DIG 2;      # @parameter%set_administrator : pair (nat %all_tokens) (big_map %ledger (pair address nat) nat) : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))
                PAIR;       # pair @parameter%set_administrator (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat)) : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))
                PAIR;       # pair (pair @parameter%set_administrator (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
              }; # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
            NIL operation; # list operation : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
          }; # list operation : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
      }
      {
        IF_LEFT
          {
            IF_LEFT
              {
                SWAP;       # @storage : @parameter%set_pause
                # == set_pause ==
                # sp.verify(sp.sender == self.data.administrator) # @storage : @parameter%set_pause
                DUP;        # @storage : @storage : @parameter%set_pause
                DUG 2;      # @storage : @parameter%set_pause : @storage
                CAR;        # pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat)) : @parameter%set_pause : @storage
                CAR;        # address : @parameter%set_pause : @storage
                SENDER;     # @sender : address : @parameter%set_pause : @storage
                COMPARE;    # int : @parameter%set_pause : @storage
                EQ;         # bool : @parameter%set_pause : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: sp.sender == self.data.administrator"; # string : @parameter%set_pause : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%set_pause : @storage
                # self.data.paused = params # @parameter%set_pause : @storage
                UPDATE 5;   # @storage
              }
              {
                SWAP;       # @storage : @parameter%token_metadata
                # == token_metadata ==
                # sp.verify(~ self.data.paused) # @storage : @parameter%token_metadata
                DUP;        # @storage : @storage : @parameter%token_metadata
                DUG 2;      # @storage : @parameter%token_metadata : @storage
                GET 5;      # bool : @parameter%token_metadata : @storage
                IF
                  {
                    PUSH string "WrongCondition: ~ self.data.paused"; # string : @parameter%token_metadata : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @parameter%token_metadata : @storage
                # def f_x1(_x1):
                #   sp.set_type(self.data.token_metadata[_x1], sp.TRecord(token_id = sp.TNat, token_info = sp.TMap(sp.TString, sp.TBytes)).layout(("token_id", "token_info")))
                #   sp.result(self.data.token_metadata[_x1])
                # compute___main___1193 = sp.local("compute___main___1193", params.handler(params.token_ids.map(sp.build_lambda(f_x1)))) # @parameter%token_metadata : @storage
                DUP;        # @parameter%token_metadata : @parameter%token_metadata : @storage
                CDR;        # lambda (list (pair (nat %token_id) (map %token_info string bytes))) unit : @parameter%token_metadata : @storage
                SWAP;       # @parameter%token_metadata : lambda (list (pair (nat %token_id) (map %token_info string bytes))) unit : @storage
                DUP;        # @parameter%token_metadata : @parameter%token_metadata : lambda (list (pair (nat %token_id) (map %token_info string bytes))) unit : @storage
                DUG 2;      # @parameter%token_metadata : lambda (list (pair (nat %token_id) (map %token_info string bytes))) unit : @parameter%token_metadata : @storage
                CAR;        # list nat : lambda (list (pair (nat %token_id) (map %token_info string bytes))) unit : @parameter%token_metadata : @storage
                MAP
                  {
                    # sp.result(self.data.token_metadata[_x1]) # nat : lambda (list (pair (nat %token_id) (map %token_info string bytes))) unit : @parameter%token_metadata : @storage
                    DUP 4;      # @storage : nat : lambda (list (pair (nat %token_id) (map %token_info string bytes))) unit : @parameter%token_metadata : @storage
                    GET 6;      # big_map nat (pair (nat %token_id) (map %token_info string bytes)) : nat : lambda (list (pair (nat %token_id) (map %token_info string bytes))) unit : @parameter%token_metadata : @storage
                    SWAP;       # nat : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : lambda (list (pair (nat %token_id) (map %token_info string bytes))) unit : @parameter%token_metadata : @storage
                    GET;        # option (pair (nat %token_id) (map %token_info string bytes)) : lambda (list (pair (nat %token_id) (map %token_info string bytes))) unit : @parameter%token_metadata : @storage
                    IF_NONE
                      {
                        PUSH int 1192; # int : lambda (list (pair (nat %token_id) (map %token_info string bytes))) unit : @parameter%token_metadata : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : lambda (list (pair (nat %token_id) (map %token_info string bytes))) unit : @parameter%token_metadata : @storage
                  }; # list @some : lambda (list (pair (nat %token_id) (map %token_info string bytes))) unit : @parameter%token_metadata : @storage
                DIG 2;      # @parameter%token_metadata : list @some : lambda (list (pair (nat %token_id) (map %token_info string bytes))) unit : @storage
                DROP;       # list @some : lambda (list (pair (nat %token_id) (map %token_info string bytes))) unit : @storage
                EXEC;       # unit : @storage
                DROP;       # @storage
              }; # @storage
          }
          {
            IF_LEFT
              {
                SWAP;       # @storage : @parameter%transfer
                # == transfer ==
                # sp.verify(~ self.data.paused) # @storage : @parameter%transfer
                DUP;        # @storage : @storage : @parameter%transfer
                DUG 2;      # @storage : @parameter%transfer : @storage
                GET 5;      # bool : @parameter%transfer : @storage
                IF
                  {
                    PUSH string "WrongCondition: ~ self.data.paused"; # string : @parameter%transfer : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @parameter%transfer : @storage
                # for transfer in params: ... # @parameter%transfer : @storage
                DUP;        # @parameter%transfer : @parameter%transfer : @storage
                ITER
                  {
                    # for tx in transfer.txs: ... # pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                    DUP;        # pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                    CDR;        # list (pair (address %to_) (pair (nat %token_id) (nat %amount))) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                    ITER
                      {
                        # sp.verify(((sp.sender == self.data.administrator) | (transfer.from_ == sp.sender)) | (self.data.operators.contains(sp.set_type_expr(sp.record(owner = transfer.from_, operator = sp.sender, token_id = tx.token_id), sp.TRecord(operator = sp.TAddress, owner = sp.TAddress, token_id = sp.TNat).layout(("owner", ("operator", "token_id")))))), 'FA2_NOT_OPERATOR') # pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                        DUP 4;      # @storage : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                        CAR;        # pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                        CAR;        # address : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                        SENDER;     # @sender : address : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                        COMPARE;    # int : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                        EQ;         # bool : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                        IF
                          {
                            PUSH bool True; # bool : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                          }
                          {
                            SENDER;     # @sender : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                            DUP 3;      # pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @sender : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                            CAR;        # address : @sender : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                            COMPARE;    # int : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                            EQ;         # bool : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                          }; # bool : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                        IF
                          {
                            PUSH bool True; # bool : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                          }
                          {
                            DUP 4;      # @storage : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            GET 3;      # pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            CDR;        # big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            SWAP;       # pair (address %to_) (pair (nat %token_id) (nat %amount)) : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            DUP;        # pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            DUG 2;      # pair (address %to_) (pair (nat %token_id) (nat %amount)) : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            GET 3;      # nat : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            SENDER;     # @sender : nat : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            DUP 5;      # pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @sender : nat : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            CAR;        # address : @sender : nat : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            PAIR 3;     # pair address (pair @sender nat) : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            MEM;        # bool : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                          }; # bool : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                        IF
                          {}
                          {
                            PUSH string "FA2_NOT_OPERATOR"; # string : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            FAILWITH;   # FAILED
                          }; # pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                        # sp.verify(self.data.token_metadata.contains(tx.token_id), 'FA2_TOKEN_UNDEFINED') # pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                        DUP 4;      # @storage : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                        GET 6;      # big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                        SWAP;       # pair (address %to_) (pair (nat %token_id) (nat %amount)) : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                        DUP;        # pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                        DUG 2;      # pair (address %to_) (pair (nat %token_id) (nat %amount)) : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                        GET 3;      # nat : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                        MEM;        # bool : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                        IF
                          {}
                          {
                            PUSH string "FA2_TOKEN_UNDEFINED"; # string : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            FAILWITH;   # FAILED
                          }; # pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                        # if tx.amount > 0: # pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                        DUP;        # pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                        GET 4;      # nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                        PUSH nat 0; # nat : nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                        COMPARE;    # int : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                        LT;         # bool : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                        IF
                          {
                            # sp.verify(self.data.ledger[(sp.set_type_expr(transfer.from_, sp.TAddress), sp.set_type_expr(tx.token_id, sp.TNat))].balance >= tx.amount, 'FA2_INSUFFICIENT_BALANCE') # pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            DUP;        # pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            GET 4;      # nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            DUP 5;      # @storage : nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            CAR;        # pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat)) : nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            GET 4;      # big_map (pair address nat) nat : nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            DUP 3;      # pair (address %to_) (pair (nat %token_id) (nat %amount)) : big_map (pair address nat) nat : nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            GET 3;      # nat : big_map (pair address nat) nat : nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            DUP 5;      # pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : nat : big_map (pair address nat) nat : nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            CAR;        # address : nat : big_map (pair address nat) nat : nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            PAIR;       # pair address nat : big_map (pair address nat) nat : nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            GET;        # option nat : nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            IF_NONE
                              {
                                PUSH int 1033; # int : nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            COMPARE;    # int : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            GE;         # bool : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            IF
                              {}
                              {
                                PUSH string "FA2_INSUFFICIENT_BALANCE"; # string : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                                FAILWITH;   # FAILED
                              }; # pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            # self.data.ledger[(sp.set_type_expr(transfer.from_, sp.TAddress), sp.set_type_expr(tx.token_id, sp.TNat))].balance = sp.as_nat(self.data.ledger[(sp.set_type_expr(transfer.from_, sp.TAddress), sp.set_type_expr(tx.token_id, sp.TNat))].balance - tx.amount) # pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            DUP 4;      # @storage : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            UNPAIR;     # pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat)) : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            UNPAIR;     # address : pair (nat %all_tokens) (big_map %ledger (pair address nat) nat) : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            SWAP;       # pair (nat %all_tokens) (big_map %ledger (pair address nat) nat) : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            UNPAIR;     # nat : big_map (pair address nat) nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            SWAP;       # big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            DUP;        # big_map (pair address nat) nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            DUP 6;      # pair (address %to_) (pair (nat %token_id) (nat %amount)) : big_map (pair address nat) nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            GET 3;      # nat : big_map (pair address nat) nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            DUP 8;      # pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : nat : big_map (pair address nat) nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            CAR;        # address : nat : big_map (pair address nat) nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            PAIR;       # pair address nat : big_map (pair address nat) nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            DUP;        # pair address nat : pair address nat : big_map (pair address nat) nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            DUG 2;      # pair address nat : big_map (pair address nat) nat : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            GET;        # option nat : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            IF_NONE
                              {
                                PUSH int 1037; # int : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                                FAILWITH;   # FAILED
                              }
                              {
                                DROP;       # pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                              }; # pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            DUP 6;      # pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            GET 4;      # nat : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            DIG 9;      # @storage : nat : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            CAR;        # pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat)) : nat : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            GET 4;      # big_map (pair address nat) nat : nat : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            DUP 8;      # pair (address %to_) (pair (nat %token_id) (nat %amount)) : big_map (pair address nat) nat : nat : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            GET 3;      # nat : big_map (pair address nat) nat : nat : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            DUP 10;     # pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : nat : big_map (pair address nat) nat : nat : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            CAR;        # address : nat : big_map (pair address nat) nat : nat : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            PAIR;       # pair address nat : big_map (pair address nat) nat : nat : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            GET;        # option nat : nat : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            IF_NONE
                              {
                                PUSH int 1037; # int : nat : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : nat : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            SUB;        # int : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            ISNAT;      # option nat : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            IF_NONE
                              {
                                PUSH int 1037; # int : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            SOME;       # option nat : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            SWAP;       # pair address nat : option nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            UPDATE;     # big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            SWAP;       # nat : big_map (pair address nat) nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            PAIR;       # pair nat (big_map (pair address nat) nat) : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            SWAP;       # address : pair nat (big_map (pair address nat) nat) : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            PAIR;       # pair address (pair nat (big_map (pair address nat) nat)) : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            PAIR;       # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            # if self.data.ledger.contains((sp.set_type_expr(tx.to_, sp.TAddress), sp.set_type_expr(tx.token_id, sp.TNat))): # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            DUP;        # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                            DUG 4;      # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
                            CAR;        # pair address (pair nat (big_map (pair address nat) nat)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
                            GET 4;      # big_map (pair address nat) nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
                            SWAP;       # pair (address %to_) (pair (nat %token_id) (nat %amount)) : big_map (pair address nat) nat : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
                            DUP;        # pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : big_map (pair address nat) nat : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
                            GET 3;      # nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : big_map (pair address nat) nat : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
                            SWAP;       # pair (address %to_) (pair (nat %token_id) (nat %amount)) : nat : big_map (pair address nat) nat : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
                            DUP;        # pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : nat : big_map (pair address nat) nat : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
                            DUG 3;      # pair (address %to_) (pair (nat %token_id) (nat %amount)) : nat : big_map (pair address nat) nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
                            CAR;        # address : nat : big_map (pair address nat) nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
                            PAIR;       # pair address nat : big_map (pair address nat) nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
                            MEM;        # bool : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
                            IF
                              {
                                # self.data.ledger[(sp.set_type_expr(tx.to_, sp.TAddress), sp.set_type_expr(tx.token_id, sp.TNat))].balance += tx.amount # pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
                                DIG 3;      # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                UNPAIR;     # pair address (pair nat (big_map (pair address nat) nat)) : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                UNPAIR;     # address : pair nat (big_map (pair address nat) nat) : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                SWAP;       # pair nat (big_map (pair address nat) nat) : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                UNPAIR;     # nat : big_map (pair address nat) nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                SWAP;       # big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                DUP;        # big_map (pair address nat) nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                DIG 5;      # pair (address %to_) (pair (nat %token_id) (nat %amount)) : big_map (pair address nat) nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                DUP;        # pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : big_map (pair address nat) nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                GET 3;      # nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : big_map (pair address nat) nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                SWAP;       # pair (address %to_) (pair (nat %token_id) (nat %amount)) : nat : big_map (pair address nat) nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                DUP;        # pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : nat : big_map (pair address nat) nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                DUG 7;      # pair (address %to_) (pair (nat %token_id) (nat %amount)) : nat : big_map (pair address nat) nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                CAR;        # address : nat : big_map (pair address nat) nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                PAIR;       # pair address nat : big_map (pair address nat) nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                DUP;        # pair address nat : pair address nat : big_map (pair address nat) nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                DUG 2;      # pair address nat : big_map (pair address nat) nat : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                GET;        # option nat : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                IF_NONE
                                  {
                                    PUSH int 1040; # int : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                    FAILWITH;   # FAILED
                                  }
                                  {}; # @some : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                DIG 6;      # pair (address %to_) (pair (nat %token_id) (nat %amount)) : @some : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                GET 4;      # nat : @some : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                ADD;        # nat : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                SOME;       # option nat : pair address nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                SWAP;       # pair address nat : option nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                UPDATE;     # big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                SWAP;       # nat : big_map (pair address nat) nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                PAIR;       # pair nat (big_map (pair address nat) nat) : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                SWAP;       # address : pair nat (big_map (pair address nat) nat) : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                PAIR;       # pair address (pair nat (big_map (pair address nat) nat)) : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                PAIR;       # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                DUG 2;      # pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
                              }
                              {
                                # self.data.ledger[(sp.set_type_expr(tx.to_, sp.TAddress), sp.set_type_expr(tx.token_id, sp.TNat))] = sp.record(balance = tx.amount) # pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
                                DIG 3;      # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                UNPAIR;     # pair address (pair nat (big_map (pair address nat) nat)) : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                UNPAIR;     # address : pair nat (big_map (pair address nat) nat) : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                SWAP;       # pair nat (big_map (pair address nat) nat) : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                UNPAIR;     # nat : big_map (pair address nat) nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                SWAP;       # big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                DUP 5;      # pair (address %to_) (pair (nat %token_id) (nat %amount)) : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                GET 4;      # nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                SOME;       # option nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                DIG 5;      # pair (address %to_) (pair (nat %token_id) (nat %amount)) : option nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                DUP;        # pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : option nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                GET 3;      # nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : option nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                SWAP;       # pair (address %to_) (pair (nat %token_id) (nat %amount)) : nat : option nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                CAR;        # address : nat : option nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                PAIR;       # pair address nat : option nat : big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                UPDATE;     # big_map (pair address nat) nat : nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                SWAP;       # nat : big_map (pair address nat) nat : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                PAIR;       # pair nat (big_map (pair address nat) nat) : address : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                SWAP;       # address : pair nat (big_map (pair address nat) nat) : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                PAIR;       # pair address (pair nat (big_map (pair address nat) nat)) : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                PAIR;       # pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                DUG 2;      # pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
                              }; # pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
                          }
                          {
                            DROP;       # pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                          }; # pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
                      }; # pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                    DROP;       # @parameter%transfer : @storage
                  }; # @parameter%transfer : @storage
                DROP;       # @storage
              }
              {
                # == update_operators ==
                # for update in params: ... # @parameter%update_operators : @storage
                DUP;        # @parameter%update_operators : @parameter%update_operators : @storage
                ITER
                  {
                    # with update.match_cases(...): # or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id))) : @parameter%update_operators : @storage
                    IF_LEFT
                      {
                        # sp.verify((add_operator.owner == sp.sender) | (sp.sender == self.data.administrator)) # pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators : @storage
                        DUP;        # pair (address %owner) (pair (address %operator) (nat %token_id)) : pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators : @storage
                        CAR;        # address : pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators : @storage
                        SENDER;     # @sender : address : pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators : @storage
                        COMPARE;    # int : pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators : @storage
                        EQ;         # bool : pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators : @storage
                        IF
                          {
                            PUSH bool True; # bool : pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators : @storage
                          }
                          {
                            DUP 3;      # @storage : pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators : @storage
                            CAR;        # pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat)) : pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators : @storage
                            CAR;        # address : pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators : @storage
                            SENDER;     # @sender : address : pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators : @storage
                            COMPARE;    # int : pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators : @storage
                            EQ;         # bool : pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators : @storage
                          }; # bool : pair (address %owner) (pair (address %operator) (nat %token_id)) : list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id)))) : @storage
                        IF
                          {}
                          {
                            PUSH string "WrongCondition: (add_operator.owner == sp.sender) | (sp.sender == self.data.administrator)"; # string : pair (address %owner) (pair (address %operator) (nat %token_id)) : list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id)))) : @storage
                            FAILWITH;   # FAILED
                          }; # pair (address %owner) (pair (address %operator) (nat %token_id)) : list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id)))) : @storage
                        # self.data.operators[sp.set_type_expr(sp.record(owner = add_operator.owner, operator = add_operator.operator, token_id = add_operator.token_id), sp.TRecord(operator = sp.TAddress, owner = sp.TAddress, token_id = sp.TNat).layout(("owner", ("operator", "token_id"))))] = sp.unit # pair (address %owner) (pair (address %operator) (nat %token_id)) : list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id)))) : @storage
                        DIG 2;      # @storage : pair (address %owner) (pair (address %operator) (nat %token_id)) : list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id))))
                        UNPAIR;     # pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat)) : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %owner) (pair (address %operator) (nat %token_id)) : list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id))))
                        SWAP;       # pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat)) : pair (address %owner) (pair (address %operator) (nat %token_id)) : list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id))))
                        UNPAIR;     # pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) : pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) : pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat)) : pair (address %owner) (pair (address %operator) (nat %token_id)) : list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id))))
                        UNPAIR;     # big_map string bytes : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) : pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat)) : pair (address %owner) (pair (address %operator) (nat %token_id)) : list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id))))
                        SWAP;       # big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : big_map string bytes : pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) : pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat)) : pair (address %owner) (pair (address %operator) (nat %token_id)) : list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id))))
                        PUSH (option unit) (Some Unit); # option unit : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : big_map string bytes : pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) : pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat)) : pair (address %owner) (pair (address %operator) (nat %token_id)) : list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id))))
                        DIG 5;      # pair (address %owner) (pair (address %operator) (nat %token_id)) : option unit : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : big_map string bytes : pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) : pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat)) : list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id))))
                        DUP;        # pair (address %owner) (pair (address %operator) (nat %token_id)) : pair (address %owner) (pair (address %operator) (nat %token_id)) : option unit : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : big_map string bytes : pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) : pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat)) : list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id))))
                        GET 4;      # nat : pair (address %owner) (pair (address %operator) (nat %token_id)) : option unit : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : big_map string bytes : pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) : pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat)) : list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id))))
                        SWAP;       # pair (address %owner) (pair (address %operator) (nat %token_id)) : nat : option unit : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : big_map string bytes : pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) : pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat)) : list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id))))
                        DUP;        # pair (address %owner) (pair (address %operator) (nat %token_id)) : pair (address %owner) (pair (address %operator) (nat %token_id)) : nat : option unit : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : big_map string bytes : pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) : pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat)) : list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id))))
                        GET 3;      # address : pair (address %owner) (pair (address %operator) (nat %token_id)) : nat : option unit : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : big_map string bytes : pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) : pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat)) : list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id))))
                        SWAP;       # pair (address %owner) (pair (address %operator) (nat %token_id)) : address : nat : option unit : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : big_map string bytes : pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) : pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat)) : list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id))))
                        CAR;        # address : address : nat : option unit : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : big_map string bytes : pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) : pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat)) : list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id))))
                        PAIR 3;     # pair address (pair address nat) : option unit : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : big_map string bytes : pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) : pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat)) : list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id))))
                        UPDATE;     # big_map (pair address (pair address nat)) unit : big_map string bytes : pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) : pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat)) : list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id))))
                        SWAP;       # big_map string bytes : big_map (pair address (pair address nat)) unit : pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) : pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat)) : list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id))))
                        PAIR;       # pair (big_map string bytes) (big_map (pair address (pair address nat)) unit) : pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) : pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat)) : list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id))))
                        PAIR;       # pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat)) : list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id))))
                        SWAP;       # pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat)) : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id))))
                        PAIR;       # pair (pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))) : list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id))))
                        SWAP;       # list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id)))) : pair (pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
                      }
                      {
                        # sp.verify((remove_operator.owner == sp.sender) | (sp.sender == self.data.administrator)) # pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators : @storage
                        DUP;        # pair (address %owner) (pair (address %operator) (nat %token_id)) : pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators : @storage
                        CAR;        # address : pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators : @storage
                        SENDER;     # @sender : address : pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators : @storage
                        COMPARE;    # int : pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators : @storage
                        EQ;         # bool : pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators : @storage
                        IF
                          {
                            PUSH bool True; # bool : pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators : @storage
                          }
                          {
                            DUP 3;      # @storage : pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators : @storage
                            CAR;        # pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat)) : pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators : @storage
                            CAR;        # address : pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators : @storage
                            SENDER;     # @sender : address : pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators : @storage
                            COMPARE;    # int : pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators : @storage
                            EQ;         # bool : pair (address %owner) (pair (address %operator) (nat %token_id)) : @parameter%update_operators : @storage
                          }; # bool : pair (address %owner) (pair (address %operator) (nat %token_id)) : list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id)))) : @storage
                        IF
                          {}
                          {
                            PUSH string "WrongCondition: (remove_operator.owner == sp.sender) | (sp.sender == self.data.administrator)"; # string : pair (address %owner) (pair (address %operator) (nat %token_id)) : list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id)))) : @storage
                            FAILWITH;   # FAILED
                          }; # pair (address %owner) (pair (address %operator) (nat %token_id)) : list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id)))) : @storage
                        # del self.data.operators[sp.set_type_expr(sp.record(owner = remove_operator.owner, operator = remove_operator.operator, token_id = remove_operator.token_id), sp.TRecord(operator = sp.TAddress, owner = sp.TAddress, token_id = sp.TNat).layout(("owner", ("operator", "token_id"))))] # pair (address %owner) (pair (address %operator) (nat %token_id)) : list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id)))) : @storage
                        DIG 2;      # @storage : pair (address %owner) (pair (address %operator) (nat %token_id)) : list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id))))
                        UNPAIR;     # pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat)) : pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %owner) (pair (address %operator) (nat %token_id)) : list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id))))
                        SWAP;       # pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat)) : pair (address %owner) (pair (address %operator) (nat %token_id)) : list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id))))
                        UNPAIR;     # pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) : pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) : pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat)) : pair (address %owner) (pair (address %operator) (nat %token_id)) : list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id))))
                        UNPAIR;     # big_map string bytes : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) : pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat)) : pair (address %owner) (pair (address %operator) (nat %token_id)) : list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id))))
                        SWAP;       # big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : big_map string bytes : pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) : pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat)) : pair (address %owner) (pair (address %operator) (nat %token_id)) : list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id))))
                        NONE unit;  # option unit : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : big_map string bytes : pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) : pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat)) : pair (address %owner) (pair (address %operator) (nat %token_id)) : list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id))))
                        DIG 5;      # pair (address %owner) (pair (address %operator) (nat %token_id)) : option unit : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : big_map string bytes : pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) : pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat)) : list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id))))
                        DUP;        # pair (address %owner) (pair (address %operator) (nat %token_id)) : pair (address %owner) (pair (address %operator) (nat %token_id)) : option unit : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : big_map string bytes : pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) : pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat)) : list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id))))
                        GET 4;      # nat : pair (address %owner) (pair (address %operator) (nat %token_id)) : option unit : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : big_map string bytes : pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) : pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat)) : list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id))))
                        SWAP;       # pair (address %owner) (pair (address %operator) (nat %token_id)) : nat : option unit : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : big_map string bytes : pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) : pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat)) : list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id))))
                        DUP;        # pair (address %owner) (pair (address %operator) (nat %token_id)) : pair (address %owner) (pair (address %operator) (nat %token_id)) : nat : option unit : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : big_map string bytes : pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) : pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat)) : list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id))))
                        GET 3;      # address : pair (address %owner) (pair (address %operator) (nat %token_id)) : nat : option unit : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : big_map string bytes : pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) : pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat)) : list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id))))
                        SWAP;       # pair (address %owner) (pair (address %operator) (nat %token_id)) : address : nat : option unit : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : big_map string bytes : pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) : pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat)) : list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id))))
                        CAR;        # address : address : nat : option unit : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : big_map string bytes : pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) : pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat)) : list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id))))
                        PAIR 3;     # pair address (pair address nat) : option unit : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : big_map string bytes : pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) : pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat)) : list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id))))
                        UPDATE;     # big_map (pair address (pair address nat)) unit : big_map string bytes : pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) : pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat)) : list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id))))
                        SWAP;       # big_map string bytes : big_map (pair address (pair address nat)) unit : pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) : pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat)) : list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id))))
                        PAIR;       # pair (big_map string bytes) (big_map (pair address (pair address nat)) unit) : pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) : pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat)) : list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id))))
                        PAIR;       # pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat)) : list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id))))
                        SWAP;       # pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat)) : pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))) : list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id))))
                        PAIR;       # pair (pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))) : list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id))))
                        SWAP;       # list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id)))) : pair (pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
                      }; # list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id)))) : pair (pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat))) (pair (pair (big_map string bytes) (big_map (pair address (pair address nat)) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
                  }; # @parameter%update_operators : @storage
                DROP;       # @storage
              }; # @storage
          }; # @storage
        NIL operation; # list operation : @storage
      }; # list operation : pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))
    PAIR;       # pair (list operation) (pair (pair address (pair nat (big_map (pair address nat) nat))) (pair (pair (big_map %metadata string bytes) (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)) (pair (bool %paused) (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))))
  };
